DESfire EV1 application design for DOPE: DESfire Open Payment Environment

AID FF77CF
Authentication AES, 5 keys (Master, Identification, Debit, Limited Credit, Credit), all files are fully enciphered, keys may be changed after authentication with master key
Two modes:
	Mode A: File 0 is read with non-diversified Identification key, then instance identifier and optionally UID can be read and used for derivation of other keys
		Card can use random UID, compatible with openkey (on 8k cards)
	Mode D: File 0 is read with diversified (using UID) Debit key, Identification key is not used
		Saves one authentication round-trip

File 0: Identification.  Backup Data File 20 bytes, Read Identification/Debit, Write Master, Readwrite Master, Change accessrights: Never
Byte 0: Application version.subversion (1 nibble each), starts at 0.0
	FIXME: Define version semantics with regards to parsing, processing and writing
Byte 1: Instance identifier length, currently 36 byte
Byte 2-17: Instance identifier, binary UUID
Byte 18-19: Application flags, 16-bit unsigned integer, LSByte first
	0: Limited credit enabled (0= no, 1= yes)
	1-5: Key derivation
		1: Use instance identifier for Debit key (0= no, 1= yes)
		2: Use instance identifier for Credit and Limited Credit key (0= no, 1= yes)
		3: Use card UID (0=no, 1= yes)
		4-5: Reserved, abort processing if set and unable to handle
	6: Use UID in signature (0= no, 1=yes)
	8-11: Signature generation
		0000: Use format 0
		Other values reserved, abort processing if set and unable to handle
	Remainder of field reserved, _ignore_ if set and unable to handle. Incompatible additions will be announced through application version field

File 1: Transaction counter.  Value file, initial value 0x7FFFFFFF, lower limit 0, upper limit 0x7FFFFFFF, Read: Debit, Write: Never, Readwrite: Never, Change accessrights: Never
	Signed integer, must be decremented for any change in Identification or Cash value files

File 2: Cash value.  Value file, initial value 0, lower limit 0, upper limit configurable, Read: Debit, Write: Limited Credit, Readwrite: Credit, Change accessrights: Never
	Signed integer, represents monetary value in 100000th of a full unit.

File 3: Signature.  Backup Data file, Read: Debit, Write: Debit, Readwrite: Credit, Change accessrights: Never
	Must be updated for any change in Transaction counter
	2 Bytes: 16-bit unsigned integer, LSByte first, length of old hash 
	x Bytes old hash
		This is the hash the previous signature was made over
	2 Bytes: 16-bit unsigned integer, LSByte first, length of certificate
	x Bytes: certificate
		1 Byte certificate format, currently 0, abort if unable to handle
		4 Bytes: 32-bit unsigned integer, LSByte first, key identifier. 
			all bits 0: invalid
			all bits 1: reserved
		1 Byte: key flags
			0: Debit (0= no, 1= yes)
			1: Limited credit (0= no, 1= yes)
			2: Credit (0= no, 1= yes)
			Other values reserved, _ignore_ if set and unable to handle, incompatible additions will be announced through certificate type
		2 Bytes: 16-bit unsigned integer, LSByte first, length of public key
		x Bytes public key
			1 Byte type, currently only 0
			Type 0: uses ECDSA, curve NIST P-256
				q: unsigned integer, MSByte first
		2 Bytes: 16-bit unsigned integer, LSByte first, length of certification signature
		x Bytes certification signature
			certificate format 0
				signature over
					Byte 0: signature type
					Byte 1: certificate type
					Byte 2-5: key identifier, 32-bit unsigned integer, LSByte first
					Byte 6: key flags
					Byte 7-8: 16-bit unsigned integer, LSByte first, length of public key
					Byte 9-x: public key
				signature expressed as
					signature type: 1 byte
						0 for ECDSA-NIST-P-256/SHA-256 with 32/32 split
					r: 32 Bytes, unsigned integer, MSByte first
					s: 32 Bytes, unsigned integer, MSByte first
				
	2 Bytes: 16-bit unsigned integer, LSByte first, length of signature
	x Bytes signature
		signature format 0
			signature over
				Byte 0: signature type
				Byte 1: signature format
				Bytes 2-9: length fields, all unsigned integers, LSByte first
					2: 8 bit, card UID, if enabled
					3: 8 bit, identification file (entire contents)
					4-5: 16 bit, old signature
					6: 8 bit, key identifier
				Remainder of data (all signed integers: LSByte first):
					4 Byte new transaction counter 
					4 Byte new lower limit
					4 Byte new upper limit
					4 Byte new value
					card UID of given length
					identification file of given length
					old signature of given length
					key identifier of given length
			signature expressed as
				signature type: 1 byte
					0 for ECDSA-NIST-P-256/SHA-256 with 32/32 split
				r: 32 Bytes, unsigned integer, MSByte first
				s: 32 Bytes, unsigned integer, MSByte first

Key derivation type 0
	HMAC-SHA256, truncated to 128 bits for AES-128
	Derivation data:
		0: 8 bit derivation type, fixed byte 0
		1-4: length fields
			1: instance identifier
			2: card UID
			3-4: reserved, length 0 if not used (indicated in Application flags in Identification file)
		3 byte AID (LSByte first)
		1 byte key number
		instance identifier of given length
		card UID of given length
		reserved fields of given length


Read process:
	Authenticate with Identification key
	Read Identification file
	Perform key derivation for Debit key
	Authenticate with derived Debit key
	Read Transaction counter, Cash value, Signature
	Verify Signature

Debit process:
	... after read process ...
	Debit 1 from transaction counter
	Debit x from cash value
	Calculate new signature
	Write new signature
	Commit transaction
	In error case: Re-read application and compare transaction counter

Credit process:
	... after read process ...
	Debit 1 from transaction counter
	Perform key derivation for Credit key
	Authenticate with derived Credit key   XXX FIXME Does this abort the transaction?
	Credit x to cash value
	Calculate new signature
	Write new signature
	Commit transaction
	In error case: Re-read application and compare transaction counter and cash value

Limited credit process:
	... after read process ...
	Debit 1 from transaction counter
	Perform key derivation for Limited credit key
	Authenticate with derived Limited credit key  XXX FIXME Does this abort the transaction?
	Limited credit x to cash value
	Calculate new signature
	Authenticate with derived Debit key
	Calculate new signature
	Write new signature
	Commit transaction
	In error case: Re-read application and compare transaction counter and cash value
	
FIXME: The (limited) credit processes seem funky, may need adjustment. 